
version = 1


[install]
python3.pkg-path = "python3"
python3.version = ">=3.9"

[vars]


[hook]
on-activate = """
  # Autogenerated by Flox

  # Setup a Python virtual environment

  export PYTHON_DIR="$FLOX_ENV_CACHE/python"
  if [ ! -d "$PYTHON_DIR" ]; then
    echo "Creating python virtual environment in $PYTHON_DIR"
    python -m venv "$PYTHON_DIR"
  fi

  # Quietly activate venv and install packages in a subshell so
  # that the venv can be freshly activated in the profile section.
  (
    source "$PYTHON_DIR/bin/activate"
    # install the dependencies for this project based on pyproject.toml
    # <https://pip.pypa.io/en/stable/cli/pip_install/>
    pip install -e . --quiet
  )

  # End autogenerated by Flox
"""

[profile]
bash = """
  # Autogenerated by Flox

  echo "Activating python virtual environment" >&2
  source "$PYTHON_DIR/bin/activate"

  # End autogenerated by Flox
"""
fish = """
  # Autogenerated by Flox

  echo "Activating python virtual environment" >&2
  source "$PYTHON_DIR/bin/activate.fish"

  # End autogenerated by Flox
"""
tcsh = """
  # Autogenerated by Flox

  echo "Activating python virtual environment" >&2
  source "$PYTHON_DIR/bin/activate.csh"

  # End autogenerated by Flox
"""
zsh = """
  # Autogenerated by Flox

  echo "Activating python virtual environment" >&2
  source "$PYTHON_DIR/bin/activate"

  # End autogenerated by Flox
"""


[services]


[include]


[build.pybritive]
command = '''
  # Create a virtual environment for the project and its dependencies.
  mkdir -p $out/pybritive
  python3 -m venv $out/pybritive/venv
  source $out/pybritive/venv/bin/activate

  # Install the project and its dependencies into the virtual environment
  pip install .

  # Symlink the project from the virtual environment into the `$out/bin`
  # directory.
  mkdir $out/bin
  cd $out/bin
  ln -s ../pybritive/venv/bin/pybritive .
'''
runtime-packages = ["python3"]


[options]
